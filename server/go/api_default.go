/*
 * Todo Manager API
 *
 * This is todo manager backend for coding tests.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service      DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"UsersPost",
			strings.ToUpper("Post"),
			"/users",
			c.UsersPost,
		},
		{
			"UsersUserIdDelete",
			strings.ToUpper("Delete"),
			"/users/{user_id}",
			c.UsersUserIdDelete,
		},
		{
			"UsersUserIdGet",
			strings.ToUpper("Get"),
			"/users/{user_id}",
			c.UsersUserIdGet,
		},
		{
			"UsersUserIdPatch",
			strings.ToUpper("Patch"),
			"/users/{user_id}",
			c.UsersUserIdPatch,
		},
		{
			"UsersUserIdPost",
			strings.ToUpper("Post"),
			"/users/{user_id}",
			c.UsersUserIdPost,
		},
		{
			"UsersUserIdTasksGet",
			strings.ToUpper("Get"),
			"/users/{user_id}/tasks",
			c.UsersUserIdTasksGet,
		},
		{
			"UsersUserIdTasksPost",
			strings.ToUpper("Post"),
			"/users/{user_id}/tasks",
			c.UsersUserIdTasksPost,
		},
		{
			"UsersUserIdTasksTaskIdDelete",
			strings.ToUpper("Delete"),
			"/users/{user_id}/tasks/{task_id}",
			c.UsersUserIdTasksTaskIdDelete,
		},
		{
			"UsersUserIdTasksTaskIdGet",
			strings.ToUpper("Get"),
			"/users/{user_id}/tasks/{task_id}",
			c.UsersUserIdTasksTaskIdGet,
		},
		{
			"UsersUserIdTasksTaskIdPatch",
			strings.ToUpper("Patch"),
			"/users/{user_id}/tasks/{task_id}",
			c.UsersUserIdTasksTaskIdPatch,
		},
	}
}

// UsersPost -
func (c *DefaultApiController) UsersPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	usersForReqParam := UsersForReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&usersForReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersForReqRequired(usersForReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersPost(r.Context(), usersForReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdDelete -
func (c *DefaultApiController) UsersUserIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	result, err := c.service.UsersUserIdDelete(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdGet -
func (c *DefaultApiController) UsersUserIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	result, err := c.service.UsersUserIdGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdPatch -
func (c *DefaultApiController) UsersUserIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	usersForReqParam := UsersForReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&usersForReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersForReqRequired(usersForReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersUserIdPatch(r.Context(), userIdParam, usersForReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdPost -
func (c *DefaultApiController) UsersUserIdPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	inlineObjectParam := InlineObject{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&inlineObjectParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInlineObjectRequired(inlineObjectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersUserIdPost(r.Context(), userIdParam, inlineObjectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdTasksGet -
func (c *DefaultApiController) UsersUserIdTasksGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	result, err := c.service.UsersUserIdTasksGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdTasksPost -
func (c *DefaultApiController) UsersUserIdTasksPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	tasksForReqParam := TasksForReq{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tasksForReqParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTasksForReqRequired(tasksForReqParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersUserIdTasksPost(r.Context(), userIdParam, tasksForReqParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdTasksTaskIdDelete -
func (c *DefaultApiController) UsersUserIdTasksTaskIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	taskIdParam := params["task_id"]

	result, err := c.service.UsersUserIdTasksTaskIdDelete(r.Context(), userIdParam, taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdTasksTaskIdGet -
func (c *DefaultApiController) UsersUserIdTasksTaskIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	taskIdParam := params["task_id"]

	result, err := c.service.UsersUserIdTasksTaskIdGet(r.Context(), userIdParam, taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersUserIdTasksTaskIdPatch -
func (c *DefaultApiController) UsersUserIdTasksTaskIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]

	taskIdParam := params["task_id"]

	result, err := c.service.UsersUserIdTasksTaskIdPatch(r.Context(), userIdParam, taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
